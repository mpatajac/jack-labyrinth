class Player {
	static Grid grid;
	static Point start;
	field int i, j, x, y, playerSize, cellSize;

	/** Constructor function for the Player object */
	constructor Player new(Point _start, int _cellSize, Grid g) {
		let start = _start;
		let grid = g;

		// make player a bit smaller than the cell
		let cellSize = _cellSize;
		let playerSize = 8 * cellSize / 10;

		// set player to top-left cell
		// x, y -> screen coordinates
		let x = (playerSize / 8) + start.x();
		let y = (playerSize / 8) + start.y();

		// i, j -> grid coordinates
		let i = 0;
		let j = 0;

		return this;
	}

	/** Method for drawing the player square onto the screen */
	method void draw() {
		do Screen.drawRectangle(
			x,
			y,
			x + playerSize,
			y + playerSize
		);
		return;
	}

	/** Free allocated memory */
	method void dispose() {
		return;
	}

	/** Method for moving the player square in desired direction */
	method void move(int dir) {
		/*
			1. delete the old square from screen
			2. move the player object to desired position
			3. redraw the player square to sreen
		*/

		var Array cells;

		// delete old square
		do Screen.setColor(false);
		do draw();

		// move
		let cells = grid.cells();

		/*
			130 -> left
			131 -> up
			132 -> right
			133 -> down
		*/

		if (dir = 130) {
			do left(cells);
		}

		if (dir = 131) {
			do up(cells);
		}

		if (dir = 132) {
			do right(cells);
		}

		if (dir = 133) {
			do down(cells);
		}

		// draw new square
		do Screen.setColor(true);
		do draw();
		return;
	}

	/** Helper method for upwards movement (if possible) */
	method void up(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j - 1, i)) {
			let cellToCheck = cells[((j - 1) * grid.getCols()) + i];
			if (~(cellToCheck.bottom())) {
				let y = y - cellSize;
				let j = j - 1;
			}
		}
		return;
	}

	/** Helper method for downwards movement (if possible) */
	method void down(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j + 1, i)) {
			let cellToCheck = cells[(j * grid.getCols()) + i];
			if (~(cellToCheck.bottom())) {
				let y = y + cellSize;
				let j = j + 1;
			}
		}
		return;
	}

	/** Helper method for leftwards movement (if possible) */
	method void left(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j, i - 1)) {
			let cellToCheck = cells[(j * grid.getCols()) + (i - 1)];
			if (~(cellToCheck.right())) {
				let x = x - cellSize;
				let i = i - 1;
			}
		}
		return;
	}

	/** Helper method for rightwards movement (if possible) */
	method void right(Array cells) {
		var Cell cellToCheck;
		if (grid.isValidPosition(j, i + 1)) {
			let cellToCheck = cells[(j * grid.getCols()) + i];
			if (~(cellToCheck.right())) {
				let x = x + cellSize;
				let i = i + 1;
			}
		}
		return;
	}


	/** Getter method for the 'i' coordinate */
	method int i() {
		return i;
	}

	/** Getter method for the 'j' coordinate */
	method int j() {
		return j;
	}
}