/** Driver code */
class Main {
	function void main() {
		/** Variable declaration */
		var int size;
		var Maze maze;

		var Player player;
		var char move;

		var int seed, lastCellIndex;
		var char difficulty, key;
		var boolean playHasFinished, gameIsRuning, difficultyChosen;

		var Arrow leftArrow, rightArrow;

		var int moveCount, timeCount, seconds;


		/** Game setup */
		let gameIsRuning = true;
		while (gameIsRuning) {
			// set game state
			let seed = 0;
			let difficulty = 2;	// medium

			let moveCount = 0;
			let timeCount = 0;
			let seconds = 0;

			let playHasFinished = false;
			let difficultyChosen = false;

			// draw home screen
			do Main.home();

			// draw the arrows
			let leftArrow = Arrow.new(
				Point.new(181, 138),
				Point.new(196, 138),
				true
			);
			let rightArrow = Arrow.new(
				Point.new(280, 138),
				Point.new(295, 138),
				false
			);

			do leftArrow.draw();
			do rightArrow.draw();

			// track the input -> used to determine difficulty and RNG seed
			while (~(difficultyChosen)) {
				let seed = seed + 1;
				let key = Keyboard.keyPressed();
				if (key = 128) {
					let difficultyChosen = true;
				} else {
					// up
					if ((key = 131) & (difficulty > 1)) {
						do leftArrow.up();
						do rightArrow.up();
						let difficulty = difficulty - 1;
						do Sys.wait(200);
					}
					// down
					if ((key = 133) & (difficulty < 3)) {
						do leftArrow.down();
						do rightArrow.down();
						let difficulty = difficulty + 1;
						do Sys.wait(200);
					}
				}
			}

			// "Loading screen" (for harder mazes)
			do Main.load();

			// set size according to difficulty
			let size = Main.setDifficulty(difficulty);

			// generate the maze
			let maze = Maze.new(seed, size);

			let lastCellIndex = (maze.getRows() * maze.getCols()) - 1;

			// create player
			let player = Player.new(maze.getStart(), size, maze.getGrid());

			// run the countdown
			do Main.countdown();

			/** UI setup */
			// moves
			do Output.moveCursor(2, 15);
			do Output.printString("Moves: 0");

			// seconds
			do Output.moveCursor(2, 40);
			do Output.printString("Time: 0");

			// draw the maze and the player
			do maze.draw();
			do player.draw();


			/** Game mechanics */
			while (~(playHasFinished)) {
				// update time
				let timeCount = timeCount + 1;
				if (timeCount > 5000) {
					let seconds	= seconds + 1;
					let timeCount = Main._mod(timeCount, 1000);
					do Output.moveCursor(2, 46);
					do Output.printInt(seconds);
				}

				let move = Keyboard.keyPressed();
				if (move > 0) {
					do player.move(move);
					let timeCount = timeCount + 1500;

					// update moves
					let moveCount = Main.updateMoveCount(moveCount);

					let playHasFinished = Main.checkForEnd(
						player, maze, lastCellIndex
					);

					do Sys.wait(200);
				}
			}

			let gameIsRuning = Main.endScreen(moveCount, seconds, difficulty);
			do Sys.wait(200);


			/** Memory cleanup */
			do maze.dispose();
			do player.dispose();
			do leftArrow.dispose();
			do rightArrow.dispose();
		}

		return;
	}

	/** Checks if the game has ended */
	function boolean checkForEnd(Player player, Maze maze, int lastCellIndex) {
		var int gridIndex;

		// players current position in the grid
		let gridIndex = (player.j() * maze.getCols()) + player.i();
		return (gridIndex = lastCellIndex);
	}

	/** Set cell size according to difficulty */
	function int setDifficulty(int difficulty) {
		// hard
		if (difficulty = 3) {
			return 13;
		}

		// medium
		if (difficulty = 2) {
			return 24;
		}

		// easy (or invalid input)
		return 35;
	}

	/** Draw home screen */
	function void home() {
		do Screen.clearScreen();

		do Output.moveCursor(4, 17);
		do Output.printString("Welcome to Jack Labyrinth!");
		do Output.moveCursor(8, 21);
		do Output.printString("Choose difficulty: ");
		do Output.moveCursor(10, 28);
		do Output.printString("easy");
		do Output.moveCursor(12, 27);
		do Output.printString("medium");
		do Output.moveCursor(14, 28);
		do Output.printString("hard");
		do Output.moveCursor(20, 16);
		do Output.printString("(Press 'Enter' to continue)");

		return;
	}

	/** Draw loading scereen */
	function void load() {
		do Screen.clearScreen();
		do Output.moveCursor(10, 15);
		do Output.printString("Generating maze, please wait ...");
		// do Sys.wait(300);
		return;
	}

	/** Run the countdown before the start of the game */
	function void countdown() {
		do Screen.clearScreen();

		// draw 3
		do Screen.drawRectangle(200, 70, 290, 90);
		do Screen.drawRectangle(200, 120, 290, 140);
		do Screen.drawRectangle(200, 170, 290, 190);
		do Screen.drawRectangle(270, 90, 290, 170);
		do Sys.wait(1000);

		// clear
		do Screen.setColor(false);
		do Screen.drawRectangle(270, 141, 290, 169);
		do Screen.setColor(true);

		// draw 2
		do Screen.drawRectangle(200, 141, 220, 169);
		do Sys.wait(1000);

		// clear
		do Screen.setColor(false);
		do Screen.drawRectangle(200, 70, 290, 190);
		do Screen.setColor(true);

		// draw 1
		do Screen.drawRectangle(235, 70, 255, 190);
		do Sys.wait(1000);

		// clear
		do Screen.setColor(false);
		do Screen.drawRectangle(235, 70, 255, 190);
		do Screen.setColor(true);

		return;
	}

	/** Update internal move counter and display change on the screen */
	function int updateMoveCount(int count) {
		var int moveCount;
		let moveCount = count + 1;

		do Output.moveCursor(2, 22);
		do Output.printInt(moveCount);
		return moveCount;
	}

	/** Helper function to calculate a % b */
	function int _mod(int a, int b) {
		return (a - ((a/b)*b));
	}

	/** Write end message and check for restart */
	function boolean endScreen(int moveCount, int seconds, int difficulty) {
		var char key;
		var boolean playAgain;
		var int x1, y1, x2, y2;
		var Arrow leftArrow, rightArrow;

		let x1 = 100;
		let y1 = 75;
		let x2 = 380;
		let y2 = 200;

		// clear middle
		do Screen.setColor(false);
		do Screen.drawRectangle(x1 - 20, y1 - 20, x2 + 20, y2 + 20);
		do Screen.setColor(true);

		// draw border
		do Border.draw(100, 75, 380, 200);

		// write end message
		do Output.moveCursor(7, 19);
		do Output.printString("You completed the maze ");
		do Output.moveCursor(8, 18);
		do Output.printString("with the following score:");

		do Sys.wait(1250);

		do Output.moveCursor(10, 28);
		do Output.printInt(
			((difficulty * 500) - (moveCount + seconds))
		);

		do Sys.wait(500);

		do Output.moveCursor(13, 24);
		do Output.printString("Play again?");

		do Output.moveCursor(15, 28);
		do Output.printString("Yes");

		do Output.moveCursor(17, 28);
		do Output.printString("No");

		do Sys.wait(200);

		let leftArrow = Arrow.new(
			Point.new(185, 171),
			Point.new(200, 171),
			true
		);
		let rightArrow = Arrow.new(
			Point.new(270, 171),
			Point.new(285, 171),
			false
		);

		do leftArrow.draw();
		do rightArrow.draw();

		let playAgain = true;
		while (~(key = 128)) {
			let key = Keyboard.keyPressed();
			if ((key = 133) & playAgain) {
				do leftArrow.down();
				do rightArrow.down();
				let playAgain = false;
				do Sys.wait(100);
			}

			if ((key = 131) & ~(playAgain)) {
				do leftArrow.up();
				do rightArrow.up();
				let playAgain = true;
				do Sys.wait(100);
			}
		}

		return playAgain;
	}
}