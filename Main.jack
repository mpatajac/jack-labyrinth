/** Driver code */
class Main {
	function void main() {
		var int size;
		var Maze maze;

		var Player player;
		var char move;

		var int seed, lastCellIndex, moveCount;
		var char difficulty, key;
		var boolean gameHasEnded, difficultyChosen;

		var Arrow leftArrow, rightArrow;

		// set game state
		let seed = 0;
		let difficulty = 2;	// medium
		let moveCount = 0;
		let gameHasEnded = false;
		let difficultyChosen = false;

		// draw home screen
		do Main.home();

		// draw the arrows
		let leftArrow = Arrow.new(
			Point.new(181, 150),
			Point.new(196, 150),
			true
		);
		let rightArrow = Arrow.new(
			Point.new(280, 150),
			Point.new(295, 150),
			false
		);

		do leftArrow.draw();
		do rightArrow.draw();

		// track the input -> used to determine difficulty and RNG seed
		while (~(difficultyChosen)) {
			let seed = seed + 1;
			let key = Keyboard.keyPressed();
			if (key = 128) {
				let difficultyChosen = true;
			} else {
				// up
				if ((key = 131) & (difficulty > 1)) {
					do leftArrow.up();
					do rightArrow.up();
					let difficulty = difficulty - 1;
					do Sys.wait(200);
				}
				// down
				if ((key = 133) & (difficulty < 3)) {
					do leftArrow.down();
					do rightArrow.down();
					let difficulty = difficulty + 1;
					do Sys.wait(200);
				}
			}
		}

		// "Loading screen" (for harder mazes)
		do Main.load();

		// set size according to difficulty
		let size = Main.setDifficulty(difficulty);

		// generate and draw the maze
		let maze = Maze.new(seed, size);

		let lastCellIndex = (maze.getRows() * maze.getCols()) - 1;

		// create player
		let player = Player.new(maze.getStart(), size, maze.getGrid());
		do player.draw();

		// set UI components
		do Output.moveCursor(2, 8);
		do Output.printString("Moves: 0");

		while (~(gameHasEnded)) {
			let move = Keyboard.keyPressed();
			if (move > 0) {
				let moveCount = Main.updateMoveCount(moveCount);

				do player.move(move);
				do Sys.wait(200);

				let gameHasEnded = Main.checkForEnd(
					player, maze, lastCellIndex, moveCount
				);
			}
		}

		return;
	}

	/** Checks if the game has ended */
	function boolean checkForEnd(
		Player player,
		Maze maze,
		int lastCellIndex,
		int moveCount
	) {
		var int gridIndex;

		// players current position in the grid
		let gridIndex = (player.j() * maze.getCols()) + player.i();
		if (gridIndex = lastCellIndex) {
			// clear ui
			do Screen.setColor(false);
			do Screen.drawRectangle(0, 0, 511, 45);

			// write end message
			do Output.moveCursor(0, 0);
			do Output.printString("You completed the maze!");
			do Output.println();
			do Output.printString("It took you ");
			do Output.printInt(moveCount);
			do Output.printString(" moves.");
			return true;
		}

		return false;
	}

	/** Set cell size according to difficulty */
	function int setDifficulty(int difficulty) {
		// hard
		if (difficulty = 3) {
			return 13;
		}

		// medium
		if (difficulty = 2) {
			return 24;
		}

		// easy (or invalid input)
		return 35;
	}

	/** Draw home screen */
	function void home() {
		do Output.moveCursor(5, 17);
		do Output.printString("Welcome to Jack Labyrinth!");
		do Output.moveCursor(9, 21);
		do Output.printString("Choose difficulty: ");
		do Output.moveCursor(11, 28);
		do Output.printString("easy");
		do Output.moveCursor(13, 27);
		do Output.printString("medium");
		do Output.moveCursor(15, 28);
		do Output.printString("hard");
		do Output.moveCursor(21, 16);
		do Output.printString("(Press 'Enter' to continue)");

		return;
	}

	/** Draw loading scereen */
	function void load() {
		do Screen.clearScreen();
		do Output.moveCursor(10, 15);
		do Output.printString("Generating maze, please wait ...");
		// do Sys.wait(300);
		return;
	}

	/** Update internal move counter and display change on the screen */
	function int updateMoveCount(int count) {
		var int moveCount;
		let moveCount = count + 1;

		do Output.moveCursor(2, 15);
		do Output.printInt(moveCount);
		return moveCount;
	}
}