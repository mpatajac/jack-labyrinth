/** Driver code */
class Main {
	function void main() {
		var int size;
		var Maze maze;

		var Player player;
		var char move;

		var int seed, lastCellIndex;
		var char difficulty;
		var boolean gameHasEnded;

		// set game state
		let seed = 0;
		let difficulty = 0;
		let gameHasEnded = false;


		// beginning text
		do Output.printString("Welcome to Jack Labyrinth!");
		do Output.println();
		do Output.printString("Choose difficulty: ");
		do Output.println();
		do Output.println();
		do Output.printString("  1 - easy");
		do Output.println();
		do Output.printString("  2 - medium");
		do Output.println();
		do Output.printString("  3 - hard");

		// wait for input -> used to determine RNG seed
		while (difficulty = 0) {
			let difficulty = Keyboard.keyPressed();
			let seed = seed + 1;
		}

		// "Loading screen" (for harder mazes)
		do Screen.clearScreen();
		do Output.moveCursor(0, 0);
		do Output.printString("Generating maze, please wait ...");
		do Sys.wait(300);

		// set size according to difficulty
		let size = Main.setDifficulty(difficulty);

		// generate and draw the maze
		let maze = Maze.new(seed, size);

		let lastCellIndex = (maze.getRows() * maze.getCols()) - 1;

		// create player and start the game
		let player = Player.new(maze.getStart(), size, maze.getGrid());
		do player.draw();

		while (~(gameHasEnded)) {
			let move = Keyboard.keyPressed();
			if (move > 0) {
				do player.move(move);
				do Sys.wait(200);

				let gameHasEnded = Main.checkForEnd(player, maze, lastCellIndex);
			}
		}

		return;
	}

	/** Checks if the game has ended */
	function boolean checkForEnd(Player player, Maze maze, int lastCellIndex) {
		var int gridIndex;

		// players current position in the grid
		let gridIndex = (player.j() * maze.getCols()) + player.i();
		if (gridIndex = lastCellIndex) {
			do Output.printString("You completed the maze!");
			return true;
		}

		return false;
	}

	function int setDifficulty(int difficulty) {
		// hard (ascii(3) => 51)
		if (difficulty = 51) {
			return 13;
		}

		// medium (ascii(2) => 50)
		if (difficulty = 50) {
			return 24;
		}

		// easy (or invalid input)
		return 35;
	}
}