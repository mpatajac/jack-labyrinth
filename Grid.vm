function Grid.new 4
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 1
pop this 1
push argument 0
pop this 4
push constant 512
push constant 2
push this 1
call Point.x 1
call Math.multiply 2
sub
pop static 0
push constant 256
push constant 4
push this 1
call Point.y 1
push constant 3
call Math.divide 2
call Math.multiply 2
sub
pop static 1
push static 0
push this 4
call Math.divide 2
pop this 3
push static 1
push this 4
call Math.divide 2
pop this 2
push this 3
push this 4
call Math.multiply 2
pop static 0
push this 2
push this 4
call Math.multiply 2
pop static 1
push this 2
push this 3
call Math.multiply 2
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 3
lt
not
if-goto WHILE_END1
push local 0
push this 3
call Math.multiply 2
push local 1
add
pop local 2
push local 2
push this 0
add
push local 0
push local 1
push this 4
push this 1
call Cell.new 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 2
push this 3
call Math.multiply 2
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop local 3
push local 3
push constant 0
call Cell.setRight 2
pop temp 0
push pointer 0
return
function Grid.draw 3
push argument 0
pop pointer 0
push this 1
call Point.x 1
push this 1
call Point.y 1
push this 1
call Point.x 1
push static 0
add
push this 1
call Point.y 1
call Screen.drawLine 4
pop temp 0
push this 1
call Point.x 1
push this 1
call Point.y 1
push this 4
add
push this 1
call Point.x 1
push this 1
call Point.y 1
push static 1
add
call Screen.drawLine 4
pop temp 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 2
lt
not
if-goto WHILE_END0
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push this 3
lt
not
if-goto WHILE_END1
push local 1
push this 3
call Math.multiply 2
push local 2
add
push this 0
add
pop pointer 1
push that 0
pop local 0
push local 0
call Cell.draw 1
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Grid.getWidth 0
push argument 0
pop pointer 0
push static 0
return
function Grid.getHeight 0
push argument 0
pop pointer 0
push static 1
return
function Grid.cells 0
push argument 0
pop pointer 0
push this 0
return
function Grid.getCols 0
push argument 0
pop pointer 0
push this 3
return
function Grid.getRows 0
push argument 0
pop pointer 0
push this 2
return
function Grid.generateMaze 4
push argument 0
pop pointer 0
push argument 1
call Random.new 1
pop local 0
call Vector.new 0
pop local 1
push constant 0
push this 0
add
pop pointer 1
push that 0
pop local 2
label WHILE_EXP0
push local 2
push constant 0
eq
not
not
if-goto WHILE_END0
push local 2
call Cell.visit 1
pop temp 0
push pointer 0
push local 2
push local 0
call Grid.getRandomNeighbour 3
pop local 3
push local 3
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
call Vector.push 2
pop temp 0
push pointer 0
push local 2
push local 3
call Grid.removeWall 3
pop temp 0
push local 3
pop local 2
goto IF_END0
label IF_FALSE0
push local 1
call Vector.isEmpty 1
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
call Vector.back 1
pop local 2
push local 1
call Vector.pop 1
pop temp 0
goto IF_END1
label IF_FALSE1
push constant 0
pop local 2
label IF_END1
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push local 1
call Vector.dispose 1
pop temp 0
push constant 0
return
function Grid.getRandomNeighbour 5
push argument 0
pop pointer 0
push constant 4
call Vector.withCapacity 1
pop local 0
push constant 0
pop local 1
push argument 1
call Cell.i 1
pop local 2
push argument 1
call Cell.j 1
pop local 3
push pointer 0
push local 0
push local 2
push local 3
push constant 1
sub
call Grid.checkAndPush 4
pop temp 0
push pointer 0
push local 0
push local 2
push constant 1
add
push local 3
call Grid.checkAndPush 4
pop temp 0
push pointer 0
push local 0
push local 2
push local 3
push constant 1
add
call Grid.checkAndPush 4
pop temp 0
push pointer 0
push local 0
push local 2
push constant 1
sub
push local 3
call Grid.checkAndPush 4
pop temp 0
push local 0
call Vector.isEmpty 1
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push constant 0
push local 0
call Vector.length 1
call Random.randRange 3
pop local 4
push local 0
push local 4
call Vector.at 2
pop local 1
label IF_FALSE0
push local 0
call Vector.dispose 1
pop temp 0
push local 1
return
function Grid.isValidPosition 0
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
not
push argument 2
push constant 0
lt
not
and
push argument 1
push this 2
lt
and
push argument 2
push this 3
lt
and
return
function Grid.checkAndPush 1
push argument 0
pop pointer 0
push pointer 0
push argument 2
push argument 3
call Grid.isValidPosition 3
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 2
push this 3
call Math.multiply 2
push argument 3
add
push this 0
add
pop pointer 1
push that 0
pop local 0
push local 0
call Cell.isVisited 1
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push local 0
call Vector.push 2
pop temp 0
label IF_FALSE1
push constant 0
return
function Grid.removeWall 0
push argument 0
pop pointer 0
push argument 1
call Cell.i 1
push argument 2
call Cell.i 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 0
call Cell.setBottom 2
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
call Cell.i 1
push argument 2
call Cell.i 1
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
push constant 0
call Cell.setBottom 2
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 1
call Cell.j 1
push argument 2
call Cell.j 1
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push constant 0
call Cell.setRight 2
pop temp 0
push constant 0
return
label IF_FALSE2
push argument 1
call Cell.j 1
push argument 2
call Cell.j 1
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 2
push constant 0
call Cell.setRight 2
pop temp 0
push constant 0
return
label IF_FALSE3
push constant 0
return
