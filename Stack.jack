class Stack {
	field int capacity, top;
	field Array A;

	/** Class constructor */
	constructor Stack new(int n) {
		if (n < 1) {
			do Sys.error(2);
		}

		let capacity = n;
		let top = 0;
		let A = Array.new(n);

		return this;
	}

	/** Capacity getter method */
	method int getCapacity() {
		return capacity;
	}

	/** Top getter method */
	method int getTop() {
		return top;
	}

	/** Checks if stack is full */
	method boolean isFull() {
		return top = capacity;
	}

	/** Checks if stack is empty */
	method boolean isEmpty() {
		return top = 0;
	}

	/** Fetch top element */
	method int top() {
		if (top = 0) {
			do Sys.error(18);
		}
		return A[top];
	}

	/** Push element onto stack */
	method void push(int x) {
		if (top = capacity) {
			do Sys.error(17);
		}

		let A[top] = x;
		let top = top + 1;
		return;
	}

	/** Pop element onto stack */
	method void pop() {
		if (top = 0) {
			do Sys.error(18);
		}

		let top = top - 1;
		return;
	}

	/** Print stack elements */
	method void print() {
		var int i;
		let i = 0;
		while (i < top) {
			do Output.printInt(A[i]);
			do Output.printChar(32);
			let i = i + 1;
		}
		do Output.println();

		return;
	}

	/** Destructor */
	method void dispose() {
		do A.dispose();

		return;
	}
}