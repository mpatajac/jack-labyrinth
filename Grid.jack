class Grid {
	static int width, height;
	field Array cells;
	field Point start;
	field int rows, cols, size;

	/** Constructor function for the Grid object */
	constructor Grid new(int _size, Point _start) {
		var int i, j, index;
		var Cell lastCell;

		let start = _start;
		let size  = _size;

		// set (potential) dimensions by removing offset
		let width  = 512 - (2 * start.x());
		let height = 256 - (4 * (start.y() / 3));

		// determine the number of columns and rows according to cell size
		let cols = width / size;
		let rows = height / size;

		// adjust the grid dimensions to actual dimensions
		let width  = cols * size;
		let height = rows * size;

		// create an array of cells (actual grid) and fill it
		let cells = Array.new(rows * cols);
		let i = 0;
		while(i < rows) {
			let j = 0;
			while(j < cols) {
				let index = (i * cols) + j;
				let cells[index] = Cell.new(i, j, size, start);
				let j = j + 1;
			}
			let i = i + 1;
		}

		// last cell doesn't have a right wall
		let lastCell = cells[rows * cols - 1];
		do lastCell.setRight(false);

		return this;
	}

	/** Method for drawing the grid onto the screen */
	method void draw() {
		var Cell currentCell;
		var int i, j;

		// draw upper border
		do Screen.drawLine(
			start.x(),
			start.y(),
			start.x() + width,
			start.y()
		);

		// draw left border (without first cell)
		do Screen.drawLine(
			start.x(),
			start.y() + size,
			start.x(),
			start.y() + height
		);


		// draw cells
		let i = 0;
		while(i < rows) {
			let j = 0;
			while(j < cols) {
				let currentCell = cells[i * cols + j];
				do currentCell.draw();
				let j = j + 1;
			}
			let i = i + 1;
		}

		return;
	}

// ------------------------------------------------------------------------

	/** Getter method for grid width */
	method int getWidth() {
		return width;
	}

	/** Getter method for grid height */
	method int getHeight() {
		return height;
	}

// ------------------------------------------------------------------------

	/** Method which generates a random maze */
	method void generateMaze(int seed) {
		var Random r;
		var Vector stack;
		var Cell currentCell, nextCell;

		// start the RNG
		let r = Random.new(seed);

		// initiate empty stack
		let stack = Vector.new();

		// start from the first cell
		let currentCell = cells[0];

		while (~(currentCell = null)) {
			// mark it as visited
			do currentCell.visit();

			// get an unvisited neighbour (or null if there isn't one)
			let nextCell = getRandomNeighbour(currentCell, r);

			// if there is one
			if (~(nextCell = null)) {
				// push the current cell onto the stack
				do stack.push(currentCell);

				// remove the wall between it and current
				do removeWall(currentCell, nextCell);

				let currentCell = nextCell;

			} else {
				if (~(stack.isEmpty())) {
					// return to previous cell
					let currentCell = stack.back();
					do stack.pop();

				} else {
					// end the loop
					let currentCell = null;
				}
			}

		}

		do stack.dispose();
		return;
	}

	/** Method that return a random unvisited neighbour of current cell (or null) */
	method Cell getRandomNeighbour(Cell currentCell, Random r) {
		var Vector neighbours;
		var Cell chosenNeighbour;
		var int i, j, index;

		let neighbours = Vector.withCapacity(4);
		let chosenNeighbour = null;

		let i = currentCell.i();
		let j = currentCell.j();

		// top
		do checkAndPush(neighbours, i, j - 1);

		// right
		do checkAndPush(neighbours, i + 1, j);

		// bottom
		do checkAndPush(neighbours, i, j + 1);

		// left
		do checkAndPush(neighbours, i - 1, j);

		// if there are non-visited neighbours, choose a random one
		if (~neighbours.isEmpty()) {
			let index = r.randRange(0, neighbours.length());
			let chosenNeighbour = neighbours.at(index);
		}

		do neighbours.dispose();
		return chosenNeighbour;
	}

	/** Helper function that check if (i, j) is in grid bounds */
	method boolean isValidPosition(int i, int j) {
		return (~(i < 0) & ~(j < 0) & (i < rows) & (j < cols));
	}

	/** Add cell to neighbours if it exists and isn't visited */
	method void checkAndPush(Vector neighbours, int i, int j) {
		var Cell potentialNeighbour;

		if (~isValidPosition(i, j)) {
			return;
		}

		let potentialNeighbour = cells[(i * cols) + j];
		if (~(potentialNeighbour.isVisited())) {
			do neighbours.push(potentialNeighbour);
		}
		return;
	}

	method void removeWall(Cell a, Cell b) {
		if (a.i() < b.i()) {
			do a.setBottom(false);
			return;
		}

		if (a.i() > b.i()) {
			do b.setBottom(false);
			return;
		}

		if (a.j() < b.j()) {
			do a.setRight(false);
			return;
		}

		if (a.j() > b.j()) {
			do b.setRight(false);
			return;
		}

		return;
	}
}